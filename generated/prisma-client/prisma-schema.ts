// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTestMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTestMessage(data: TestMessageCreateInput!): TestMessage!
  updateTestMessage(data: TestMessageUpdateInput!, where: TestMessageWhereUniqueInput!): TestMessage
  updateManyTestMessages(data: TestMessageUpdateManyMutationInput!, where: TestMessageWhereInput): BatchPayload!
  upsertTestMessage(where: TestMessageWhereUniqueInput!, create: TestMessageCreateInput!, update: TestMessageUpdateInput!): TestMessage!
  deleteTestMessage(where: TestMessageWhereUniqueInput!): TestMessage
  deleteManyTestMessages(where: TestMessageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  testMessage(where: TestMessageWhereUniqueInput!): TestMessage
  testMessages(where: TestMessageWhereInput, orderBy: TestMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestMessage]!
  testMessagesConnection(where: TestMessageWhereInput, orderBy: TestMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestMessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  testMessage(where: TestMessageSubscriptionWhereInput): TestMessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TestMessage {
  id: ID!
  text: String!
  author: String!
}

type TestMessageConnection {
  pageInfo: PageInfo!
  edges: [TestMessageEdge]!
  aggregate: AggregateTestMessage!
}

input TestMessageCreateInput {
  id: ID
  text: String!
  author: String!
}

type TestMessageEdge {
  node: TestMessage!
  cursor: String!
}

enum TestMessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  author_ASC
  author_DESC
}

type TestMessagePreviousValues {
  id: ID!
  text: String!
  author: String!
}

type TestMessageSubscriptionPayload {
  mutation: MutationType!
  node: TestMessage
  updatedFields: [String!]
  previousValues: TestMessagePreviousValues
}

input TestMessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestMessageWhereInput
  AND: [TestMessageSubscriptionWhereInput!]
}

input TestMessageUpdateInput {
  text: String
  author: String
}

input TestMessageUpdateManyMutationInput {
  text: String
  author: String
}

input TestMessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  AND: [TestMessageWhereInput!]
}

input TestMessageWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`